{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","console","log","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","process","requests","fetchTrending","fetchNetflixOriginals","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a222135.chunk.js","sourcesContent":["import axios from 'axios';\n\n// base url to make requests to movie database.\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\"\n})\n\nexport default instance;","import React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport './Row.css'; \nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row({ title, fetchUrl,isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n\n  // code which runs and gets data on specific condition\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      //\"https://api.themoviedb.org/3//discover/tv?api_key=${API_KEY}&with_networks=213\"\n      //   console.log(request.data.results);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n    // if [], run once when the row loads, and don't run again.\n  }, [fetchUrl]);\n  // console.log(movies);\n\nconst opts = {\n  height: \"390\",\n  width: \"100%\",\n  playerVars: {\n    // https://developers.google.com/youtube/player_parameters\n    autoplay: 1,\n  },\n};\n\nconst handleClick = (movie) => {\n  if (trailerUrl) {\n    setTrailerUrl('');\n  } else {\n    movieTrailer(movie?.name || \"\") \n    .then(url => {\n      const urlParams = new URLSearchParams(new URL(url).search);\nsetTrailerUrl(urlParams.get('v'));\nconsole.log(urlParams.get('v'));\n    }).catch(error => console.log(console.error()))\n  }\n}\n\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row_posters\">\n        {/*several row_poster(s) */}\n        {movies.map((movie) => (\n          <img\n          key={movie.id}\n          onClick={() => handleClick(movie)}\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      <div>\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n      </div>\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = `${process.env.REACT_APP_TMDB_API_KEY}`;\n\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n//   fetchTopRated: `/movies/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;","import React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport './Banner.css';\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  // console.log(movie);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner_contents\">\n        <h1 className=\"banner_title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner_buttons\">\n          <button className=\"banner_button\">Play</button>\n          <button className=\"banner_button\">My List</button>\n        </div>\n        <h1 className=\"banner_description\">{movie?.overview}\n        {truncate(movie?.overview, 150)}</h1>\n      </div>\n\n      <div className=\"banner--fadeBottom\" />\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useEffect, useState } from 'react';\nimport './Nav.css';\n\nfunction Nav() {\n    const [show, handleShow] = useState(false);\n\n    useEffect(() => {\nwindow.addEventListener('scroll', () => {\n    if (window.scrollY > 100) {\n        handleShow(true);\n    } else handleShow(false);\n    });\n    return () => {\n        window.removeEventListener('scroll');\n    };\n}, []);\n\n    return (\n        <div className={`nav ${show && \"nav_black\"}`}>\n            {/* <img className=\"nav_logo\" src=\"./images/NetflixLogo.png\" */}\n            <img className=\"nav_logo\" src=\"https://upload.wikimedia.org/wikipedia/commons/1/15/Logonfx.png\"\n           \nalt=\"Netflix Logo\" />\n{/* <img className=\"nav_avatar\"\nsrc=\"./smiley.png\"\nalt=\"Netflix Logo\" /> */}\n        </div>\n    )\n}\n\nexport default Nav;","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from './Banner';\nimport Nav from './Nav';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Nav />\n       <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      {/* <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} /> */}\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}